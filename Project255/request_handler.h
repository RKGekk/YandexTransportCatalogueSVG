#pragma once

#include <iostream>
#include <sstream>
#include <string>
#include <type_traits>
#include <functional>
#include <memory>
#include <vector>

#include "transport_catalogue.h"
#include "domain.h"
#include "map_renderer.h"


/*
 * Здесь можно было бы разместить код обработчика запросов к базе, содержащего логику, которую не
 * хотелось бы помещать ни в transport_catalogue, ни в json reader.
 *
 * В качестве источника для идей предлагаем взглянуть на нашу версию обработчика запросов.
 * Вы можете реализовать обработку запросов способом, который удобнее вам.
 *
 * Если вы затрудняетесь выбрать, что можно было бы поместить в этот файл,
 * можете оставить его пустым.
 */

 // Класс RequestHandler играет роль Фасада, упрощающего взаимодействие JSON reader-а
 // с другими подсистемами приложения.
 // См. паттерн проектирования Фасад: https://ru.wikipedia.org/wiki/Фасад_(шаблон_проектирования)
 /*
 class RequestHandler {
 public:
     // MapRenderer понадобится в следующей части итогового проекта
     RequestHandler(const TransportCatalogue& db, const renderer::MapRenderer& renderer);

     // Возвращает информацию о маршруте (запрос Bus)
     std::optional<BusStat> GetBusStat(const std::string_view& bus_name) const;

     // Возвращает маршруты, проходящие через
     const std::unordered_set<BusPtr>* GetBusesByStop(const std::string_view& stop_name) const;

     // Этот метод будет нужен в следующей части итогового проекта
     svg::Document RenderMap() const;

 private:
     // RequestHandler использует агрегацию объектов "Транспортный Справочник" и "Визуализатор Карты"
     const TransportCatalogue& db_;
     const renderer::MapRenderer& renderer_;
 };
 */

class InputDataProcessor {
public:
    static void Process(TransportCatalogue& transport_catalog, std::vector<std::unique_ptr<UserInputData>>);
};

class StatDataProcessor {
public:
    using ProcessFn = std::function<void(const TransportCatalogue&, const std::unique_ptr<UserStatData>&, std::ostream&)>;

    StatDataProcessor();

    void Process(const TransportCatalogue& transport_catalog, std::vector<std::unique_ptr<UserStatData>>, std::ostream& out);
    int RegisterProcess(StatRequestType rt, ProcessFn fn);
    void RegisterEventListener(const EventListenerDelegate& eventDelegate, const EventTypeId& type);
private:
    std::unordered_map<StatRequestType, std::unordered_map<int, ProcessFn>> _processes;
    std::unique_ptr<IEventManager> m_evt_mgr;
    static int _ct;
};

class StatDataProcessorFactory {
public:
    static StatDataProcessor Create(StreamType st);
};